--Tasks 4: Subquery and its types 

--1. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery.  
select venue_name, (select avg(ticket_price) from event e where e.venue_id = v.venue_id) as avg_ticket_price  
from venue v;  

--2. Find Events with More Than 50% of Tickets Sold using subquery.  
select event_name from event  
where (total_seats - available_seats) > (total_seats * 0.5);  

--3. Calculate the Total Number of Tickets Sold for Each Event.  
select event_name, (select sum(num_tickets) from booking b where b.event_id = e.event_id) as total_tickets_sold  
from event e;  

--4. Find Users Who Have Not Booked Any Tickets Using a NOT EXISTS Subquery.  
select customer_name from customer c  
where not exists (select 1 from booking b where b.customer_id = c.customer_id);  

--5. List Events with No Ticket Sales Using a NOT IN Subquery.  
select event_name from event  
where event_id not in (select distinct event_id from booking);  

--6. Calculate the Total Number of Tickets Sold for Each Event Type Using a Subquery in the FROM Clause.  
select e.event_type, total_tickets_sold  
from (select event_type, sum(num_tickets) as total_tickets_sold  
      from booking b join event e on b.event_id = e.event_id  
      group by e.event_type) as subquery;  

--7. Find Events with Ticket Prices Higher Than the Average Ticket Price Using a Subquery in the WHERE Clause.  
select event_name, ticket_price from event  
where ticket_price > (select avg(ticket_price) from event);  

--8. Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery.  
select c.customer_name,  
       (select sum(b.total_cost) from booking b where b.customer_id = c.customer_id) as total_revenue  
from customer c;  

--9. List Users Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE Clause.  
select customer_name from customer  
where customer_id in (select distinct b.customer_id from booking b  
                      join event e on b.event_id = e.event_id  
                      where e.venue_id = 1); -- Change '1' to the specific venue_id  

--10. Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery with GROUP BY.  
select event_type,  
       (select sum(num_tickets) from booking b where b.event_id = e.event_id) as total_tickets_sold  
from event e group by event_type;  

--11. Find Users Who Have Booked Tickets for Events in each Month Using a Subquery with DATE_FORMAT.  
select distinct c.customer_name  
from customer c  
where c.customer_id in (select b.customer_id from booking b  
                        where month(b.booking_date) = 4 and year(b.booking_date) = 2025);  

--12. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery.  
select venue_name, (select avg(ticket_price) from event e where e.venue_id = v.venue_id) as avg_ticket_price  
from venue v;  
